from django.shortcuts import render
from datetime import datetime, date, time
import requests
import html
from django.http import JsonResponse
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login, authenticate
from .models import TableDrink
from .models import Table, TableAvailableSlot
import numpy as np
import skfuzzy as fuzz
from .models import UserRating
from django.db.models import Q
from .telegram_bot import send_telegram_message


def rate_page(request):
    return render(request, "restourancite/rating.html")


def home(request):
    tables = Table.objects.filter(available_slots__isnull=False).distinct()
    return render(
        request, "restourancite/restourant_main_page.html", {"tables": tables}
    )


def menu(request):
    return render(request, "restourancite/restourant_menu.html")


def about(request):
    return render(request, "restourancite/restourant_me.html")


def contact(request):
    return render(request, "restourancite/restourant_contact.html")


def drink(request):
    return render(request, "restourancite/restourant_drink.html")


from django.shortcuts import render, redirect
from .models import TableReservation  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å


def get_drink_count(request):
    count = TableDrink.objects.count()
    return JsonResponse({"count": count})


def get_available_dates_times(request, table_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞,
    –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—è –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    try:
        table = Table.objects.get(id=table_id)
    except Table.DoesNotExist:
        return JsonResponse({'error': '–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    today = date.today()
    now_time = datetime.now().time() # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.now().time() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:
    # 1. –î–∞—Ç—ã —Å—Ç—Ä–æ–≥–æ –≤ –±—É–¥—É—â–µ–º (–±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
    # 2. –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è, —Ç–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    available_slots = TableAvailableSlot.objects.filter(
        Q(table=table) &
        (
            Q(date__gt=today) |  # –î–∞—Ç—ã –ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
            Q(date=today, time__gte=now_time) # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –Ω–æ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—É—â–∏–º –∏–ª–∏ –±—É–¥—É—â–∏–º
        )
    ).order_by('date', 'time') # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    available_dates_times = {}
    for slot in available_slots:
        date_str = slot.date.strftime('%Y-%m-%d')
        time_str = slot.time.strftime('%H:%M')
        if date_str not in available_dates_times:
            available_dates_times[date_str] = []
        available_dates_times[date_str].append(time_str)

    return JsonResponse({'available_dates_times': available_dates_times})


def TableReservation_view(request):
    tables = Table.objects.filter(available_slots__isnull=False).distinct()
    if request.method == "POST":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.POST.get("form_name")
        surname = request.POST.get("form_surname")
        patronymic = request.POST.get("form_patronymic")
        email = request.POST.get("form_mail")
        phone = request.POST.get("form_telephone")
        date = request.POST.get("form_date")
        time = request.POST.get("form_time")
        guests_number = request.POST.get("form_number_guest")
        description = request.POST.get("floatingTextarea")
        agreed_to_policy = request.POST.get("flexCheckDefault")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        if not agreed_to_policy:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {
                    "error": "–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.",
                    "tables": tables,
                },
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞
        table_id = request.POST.get("form_table")
        if not table_id:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫.", "tables": tables},
            )
        try:
            table = Table.objects.get(id=table_id)
        except Table.DoesNotExist:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", "tables": tables},
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if not date or not time:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.", "tables": tables},
            )

        try:
            selected_date = datetime.strptime(date, "%Y-%m-%d").date()
            selected_time = datetime.strptime(time, "%H:%M").time()
        except ValueError:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.", "tables": tables},
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ TableAvailableSlot
        slot_exists = TableAvailableSlot.objects.filter(
            table=table, date=selected_date, time=selected_time
        ).exists()

        if not slot_exists:
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", "tables": tables},
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        try:
            guests_number = int(guests_number)
            if guests_number <= 0:
                return render(
                    request,
                    "restourancite/restourant_main_page.html",
                    {
                        "error": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.",
                        "tables": tables,
                    },
                )
        except (ValueError, TypeError):
            return render(
                request,
                "restourancite/restourant_main_page.html",
                {"error": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.", "tables": tables},
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        reservation = TableReservation(
            table=table,
            name=name,
            surname=surname,
            patronymic=patronymic,
            email=email,
            phone=phone,
            date=selected_date,
            time=selected_time,
            guests_number=guests_number,
            description=description,
            agreed_to_policy=True,
        )
        reservation.save()

        safe_table_number = html.escape(str(table.number))
        safe_name = html.escape(name)
        safe_surname = html.escape(surname)
        safe_phone = html.escape(phone)
        safe_email = html.escape(email or '–Ω–µ —É–∫–∞–∑–∞–Ω')
        safe_guests = html.escape(str(guests_number))
        safe_description = html.escape(description or '–Ω–µ—Ç')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        message_text = (
            f"<b>üõéÔ∏è –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞!</b>\n\n"
            f"<b>–°—Ç–æ–ª–∏–∫:</b> ‚Ññ{safe_table_number}\n"
            f"<b>–î–∞—Ç–∞:</b> {selected_date.strftime('%d.%m.%Y')}\n"
            f"<b>–í—Ä–µ–º—è:</b> {selected_time.strftime('%H:%M')}\n"
            f"<b>–ò–º—è:</b> {safe_name} {safe_surname}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {safe_phone}\n"
            f"<b>Email:</b> {safe_email}\n"
            f"<b>–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π:</b> {safe_guests}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {safe_description}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(message_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç –∏–∑ TableAvailableSlot
        TableAvailableSlot.objects.filter(
            table=table, date=selected_date, time=selected_time
        ).delete()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–∏–∫–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        tables = Table.objects.filter(available_slots__isnull=False).distinct()

        # –í–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        return render(
            request,
            "restourancite/restourant_main_page.html",
            {"success": "–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", "tables": tables},
        )

    return render(
        request, "restourancite/restourant_main_page.html", {"tables": tables}
    )


from .models import Tableappeal


def Tableappeal_view(request):
    if request.method == "POST":
        name_surname_patronymic = request.POST.get("form_FCs_appeal")
        email = request.POST.get("form_mail_appeal")
        appeal_type_select = request.POST.get("form_select_appeal")
        phone = request.POST.get("form_telephone_appeal")
        appeal_text = request.POST.get("floatingTextarea_appeal")
        agreed_to_policy1 = request.POST.get(
            "flexCheckDefault_appeal"
        )  # –≠—Ç–æ –±—É–¥–µ—Ç "true", –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ

        if not agreed_to_policy1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
            return render(
                request,
                "restourancite/restourant_me.html",
                {
                    "error": "–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.",
                },
            )

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        appeal = Tableappeal(
            name_surname_patronymic=name_surname_patronymic,
            email=email,
            appeal_type_select=appeal_type_select,
            phone=phone,
            appeal_text=appeal_text,
            agreed_to_policy1=True,
        )
        appeal.save()
        
        message_text = (
            f"<b>üó£Ô∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞!</b>\n\n"
            f"<b>–¢–∏–ø:</b> {appeal_type_select}\n"
            f"<b>–§–ò–û:</b> {name_surname_patronymic}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>Email:</b> {email}\n\n"
            f"<b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n{appeal_text}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(message_text)
        
        return render(
            request,
            "restourancite/restourant_me.html",
            {"success": "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"},
        )

    return render(request, "restourancite/restourant_me.html")


def get_drink_by_id(request, id):
    try:
        drink = TableDrink.objects.get(id=id)
        image_url = (
            request.build_absolute_uri(
                "/drink_images/" + drink.image_drink.name.split("/")[-1]
            )
            if drink.image_drink
            else None
        )
        data = {
            "name": drink.name,
            "price": drink.price,
            "description_drink": drink.description_drink,
            "structure_drink": drink.structure_drink,
            "image_drink": image_url,
            "drink_type_select": drink.drink_type_select,
        }
        return JsonResponse(data)
    except TableDrink.DoesNotExist:
        return JsonResponse({"error": "Drink not found"}, status=404)


def calculate_overall_rating(request):
    if request.method == "POST":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            food_rating = request.POST.get("food_rating")
            service_rating = request.POST.get("service_rating")
            atmosphere_rating = request.POST.get("atmosphere_rating")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if not food_rating or not service_rating or not atmosphere_rating:
                return JsonResponse({"error": "–í—Å–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."}, status=400)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ü–µ–Ω–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            food_rating = int(food_rating)
            service_rating = int(service_rating)
            atmosphere_rating = int(atmosphere_rating)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if not (1 <= food_rating <= 5) or not (1 <= service_rating <= 5) or not (1 <= atmosphere_rating <= 5):
                return JsonResponse({"error": "–û—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5"}, status=400)

            # –ù–µ—á–µ—Ç–∫–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            x_food = np.arange(1, 6, 1)
            x_service = np.arange(1, 6, 1)
            x_atmosphere = np.arange(1, 6, 1)
            x_overall = np.arange(1, 6, 1)

            # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –µ–¥—ã
            food_low = fuzz.trapmf(x_food, [1, 1, 2, 3])
            food_medium = fuzz.trimf(x_food, [2, 3, 4])
            food_high = fuzz.trapmf(x_food, [3, 4, 5, 5])

            # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            service_low = fuzz.trapmf(x_service, [1, 1, 2, 3])
            service_medium = fuzz.trimf(x_service, [2, 3, 4])
            service_high = fuzz.trapmf(x_service, [3, 4, 5, 5])

            # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
            atmosphere_low = fuzz.trapmf(x_atmosphere, [1, 1, 2, 3])
            atmosphere_medium = fuzz.trimf(x_atmosphere, [2, 3, 4])
            atmosphere_high = fuzz.trapmf(x_atmosphere, [3, 4, 5, 5])

            # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
            overall_low = fuzz.trapmf(x_overall, [1, 1, 2, 3])
            overall_medium = fuzz.trimf(x_overall, [2, 3, 4])
            overall_high = fuzz.trapmf(x_overall, [3, 4, 5, 5])

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–µ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            food_levels = {
                "low": fuzz.interp_membership(x_food, food_low, food_rating),
                "medium": fuzz.interp_membership(x_food, food_medium, food_rating),
                "high": fuzz.interp_membership(x_food, food_high, food_rating),
            }

            service_levels = {
                "low": fuzz.interp_membership(x_service, service_low, service_rating),
                "medium": fuzz.interp_membership(x_service, service_medium, service_rating),
                "high": fuzz.interp_membership(x_service, service_high, service_rating),
            }

            atmosphere_levels = {
                "low": fuzz.interp_membership(x_atmosphere, atmosphere_low, atmosphere_rating),
                "medium": fuzz.interp_membership(x_atmosphere, atmosphere_medium, atmosphere_rating),
                "high": fuzz.interp_membership(x_atmosphere, atmosphere_high, atmosphere_rating),
            }

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª (27 –ø—Ä–∞–≤–∏–ª –¥–ª—è 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            aggregated = np.zeros_like(x_overall)
            for food_level_name, food_level_value in food_levels.items():
                for service_level_name, service_level_value in service_levels.items():
                    for atmosphere_level_name, atmosphere_level_value in atmosphere_levels.items():
                        rule_strength = min(
                            food_level_value, service_level_value, atmosphere_level_value
                        )

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
                        if food_level_name == "low" and service_level_name == "low" and atmosphere_level_name == "low":
                            aggregated = np.fmax(aggregated, rule_strength * overall_low)
                        elif food_level_name == "high" and service_level_name == "high" and atmosphere_level_name == "high":
                            aggregated = np.fmax(aggregated, rule_strength * overall_high)
                        else:
                            aggregated = np.fmax(aggregated, rule_strength * overall_medium)

            # –î–µ—Ñ–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è
            overall_score = fuzz.defuzz(x_overall, aggregated, "centroid")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
            UserRating.objects.create(
                food_rating=food_rating,
                service_rating=service_rating,
                atmosphere_rating=atmosphere_rating,
            )

            # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return JsonResponse({"overall_score": round(overall_score, 2)})

        except Exception as e:
            return JsonResponse({"error": f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: {str(e)}"}, status=500)

    return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å POST"}, status=400)